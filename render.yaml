# For deployment on Render since it does not support docker-compose
services:
  - name: prometheus
    type: web
    env: docker
    plan: standard
    image: ${PROM_IMAGE}
    startCommand: >
      --config.file=/etc/prometheus/prometheus.yml
      --storage.tsdb.path=/prometheus
      --web.console.libraries=/usr/share/prometheus/console_libraries
      --web.console.templates=/usr/share/prometheus/consoles
      --web.enable-lifecycle
    disk:
      - name: prometheus_data
        mountPath: /prometheus
    envVars:
      - key: PROM_PORT
        value: ${PROM_PORT}

  - name: node-exporter
    type: web
    env: docker
    plan: standard
    image: ${NODE_EXPORTER_IMAGE}
    startCommand: >
      --path.procfs=/host/proc
      --path.sysfs=/host/sys
      --collector.filesystem.ignored-mount-points
      "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    envVars:
      - key: NODE_EXPORTER_PORT
        value: ${NODE_EXPORTER_PORT}

  - name: alertmanager
    type: web
    env: docker
    plan: standard
    image: ${ALERT_MANAGER_IMAGE}
    startCommand: alertmanager
    disk:
      - name: alertmanager_data
        mountPath: /etc/alertmanager
    envVars:
      - key: ALERT_MANAGER_PORT
        value: ${ALERT_MANAGER_PORT}

  - name: blackbox-exporter
    type: web
    env: docker
    plan: standard
    image: ${BLACKBOX_IMAGE}
    startCommand: >
      --config.file=/etc/blackboxexporter/config.yml
    disk:
      - name: blackbox_data
        mountPath: /etc/blackboxexporter
    envVars:
      - key: BLACKBOX_PORT
        value: ${BLACKBOX_PORT}

  - name: grafana
    type: web
    env: docker
    plan: standard
    image: ${GRAFANA_IMAGE}
    startCommand: grafana-server
    disk:
      - name: grafana_data
        mountPath: /var/lib/grafana
    envVars:
      - key: GRAFANA_PORT
        value: ${GRAFANA_PORT}
      - key: GF_SECURITY_ADMIN_PASSWORD
        value: ${GRAFANA_ADMIN_PASSWORD}

  - name: loki
    type: web
    env: docker
    plan: standard
    image: ${LOKI_IMAGE}
    startCommand: -config.file=/etc/loki/local-config.yaml
    disk:
      - name: loki_data
        mountPath: /etc/loki
    envVars:
      - key: LOKI_PORT
        value: ${LOKI_PORT}

  - name: otel-collector
    type: web
    env: docker
    plan: standard
    image: ${OTEL_COLLECTOR_IMAGE}
    startCommand: >
      --config=/etc/otel-collector-config.yaml
    disk:
      - name: otel_collector_data
        mountPath: /etc/otel-collector
    envVars:
      - key: DD_API_KEY
        value: ${DD_API_KEY}
      - key: NEW_RELIC_API_KEY
        value: ${NEW_RELIC_API_KEY}
      - key: HONEYCOMB_API_KEY
        value: ${HONEYCOMB_API_KEY}
      - key: HONEYCOMB_DATASET
        value: ${HONEYCOMB_DATASET}

  - name: auth-hook
    type: web
    env: docker
    plan: standard
    buildCommand: docker build ./examples/auth-hook
    startCommand: ./examples/auth-hook/start.sh